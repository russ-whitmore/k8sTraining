##Create user account 

Generate client keys
    openssl genrsa -out dev-tom.key 2048 
    ls 
    cat dev-tom.key to check contents 

Create cert signing request for key we just generated 
    openssl req -new -key dev-tom.key -subject "/CN=tom" -out dev-tom.csr (indicates cert is for user Tom)
    ls 
    cat dev-tom.csr to check contents 

Create CSR k8s resources 
    Go to k8s document 
    Search for csr or certificatesingingrequest 
    vim dev-tom-crs.yaml 
    paste contents of example of csr 
    change name to dev-tom 
    save changes 
    cat dev-tom.csr | base64 | tr -d "\n" (copying components, show base64 and removing all new lines)
    delete request line: in dev-tom-csr.yaml config line 
    paste in new value  in request: 
    extend expiration to 100 days 
    save and quit 

    kubectl apply -f dev-tom-csr.yaml 
    will get an error around expirationseconds field is unknown 
        That's because we have an older version of k8s 
        We can comment out the field and use when we upgrade
    Run command again
    kubectl get csr - should see dev-tom and see condition - we need to approve this 
    cat ~/.kubec/config | grep kubernetes-admin -A2

Approve CSR 
    kubectl get csr 
    kubectl certificate --help 
    kubectl certificate approve dev-tom 
    kubectl get csr should show as approved and issued 
    Cert is now signed 
    kubectl get csr dev-tom -o yaml 
    See new field in status called certicate (auto generated by k8s)
    copy certificate field 
    echo 'base64 encode contents of certificate we just copied" | base64 --decode 
    will now get a certificate 
    rerun but echo 'base64 encode contents of certificate we just copied" | base64 --decode > dev-tom.crt 
    ls 
    cat dev-tom.crt 
    
    


