## Create ServiceAccount and perms 

Service accounts provide an identity for processes that run in a pod 
Assign permissions to that service account via Role and ClusterRole (Binding)

Create service account 

    kubectl create serviceaccount --help
    kubectl create serviceaccount jenkins --dry-run=client -o yaml > jenkins-sa.yaml
    vim jenkins-va.yaml  
    cp config ~/.kube/config - switch back to admin account from dev-tom account 
    kubectl apply -f jenkins-va.yaml - service account created / tokens created 
    kubectl describe serviceaccount jenkins
    kubectl get secret jenkins-token-1d2d23 (last set of numbers is dependent on what is outputted)
    service account token creates the ca data as well as token 

How to access cluster using serviceaccount

    copy token - echo (token) | base64 --decode (need to decode token)
    save token into variable - token=(value)
    rm ~/.kube/config 
    kubectl --server=http://ipaddress --certificate-authority /etc/kubernetes/pki/ca/crt --token $token 
    user doesn't have ability to view yet 

Create a kubeconfig file for service account users 

    cp dev-tom.conf jenkins.conf 
    vim jenkins.conf 
    change any references of tom to jenkins 
    get rid of client key and client certificate
    token: (decoded token for service account)
    kubectl --kubeconfig jenkins.conf get pod 


Create role for default namespace 
    kubectl create role --help
    kubectl create role cicd-role --verb=create,update,list --resource=deployments.apps,services --dry-run=client -o yaml > cicd-role.yaml 
    Error because we need admin users kubeconfig file 
    copy back to default cp config ~/.kube/config 
    kubectl create role cicd-role --verb=create,update,list --resource=deployments.apps,services --dry-run=client -o yaml > cicd-role.yaml 
    vim cicd-role.yaml 
    Two different api groups > 2 different role sections 
    don't need to change namespace - otherwise would need to add in namespace 
    kubectl apply -f cicd-role.yaml 
    kubectl describe role cicd-role


Bind role to jenkins service account 
    kubectl create rolebinding cicd-binding --role=cicd-role --serviceaccount=default:jenkins --dry-run=client -o yaml > cicd-binding.yaml 
    vim cicd-binding.yaml 
    kubectl apply -f cicd-binding.yaml 
    kubectl describe rolebinding cicd-binding
    kubectl auth can-i create service --as system:serviceaccount:default:jenkins -n default 
    kubectl auth can-i create service --as system:serviceaccount:default:jenkins -n kube-system
    kubectl auth can-i create deployment --as system:serviceaccount:default:jenkins -n default 

Give jenkins.conf - hand over to whoever is responsible for jenkins server so they can execute commands in jenkins 

